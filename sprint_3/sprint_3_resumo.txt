#->> Sprint 03: 
    ## - Assuntos - 
        ### Tratamento de erros  v
        ### Manipulação de arquivos  v
        ### Módulos e PIP v
        ### Ambientes virtuais v
        
    
    ### Manipulação de arquivos
        $ Tipo de arquivos 
            $ Texto Simples
                - Alfanumericos
                - Formatado em Linhas
                - Linhas Terminadas com EOL("\n")

                $ Exemplo desses Arquivos:
                    - .txt .csv .xml
            $ Binarios 
                - Não são texto plano 
                - Apenas programas que sabem sua estrutura conseguem processa-los.

                $ Exemplo desses Arquivos:
                    - .xlsx .pdf .jpg .png
            
        $ Processamento de Arquivos
            $ Abrir
                - Usando o comando open() -> file = open("exemplo.txt", "a") #(caminho_p_arq, tipo_de_abertura)

            $ Tipos de abertura
                - "r" -> para ler
                - "r+" -> ler e escrever
                - "w" -> para escrever
                - "w+" -> para escrever (apaga se o arquivo ja existir)
                - "x" -> abre para criação exclusiva
                - "b" -> modo binario
                - "t" -> modo texto
                - "+" -> abrir para atualizar (escrever e ler)

        $ Abrindo arquivos        
            file = open("nome.txt, "a")
            print(file)

        $ Funções para operar em "file"
            - read() - lê todo o arquivo
            - close() - fecha arquivo 
            - write(<string>) - escreve a string no arquivo
        
            $ Exemplo
                file = open("exemplo.txt, "a")
                file.write("escrevendo isso")
                file.close()

        $ Leitura de Arquivos
            $ read([N]) - retorna o conteudo do arquivo como uma unica string, N é um valor opcional, se erro: reton=ra erro
            $ readline([N]) - retorna uma  linha do texto a cada chamada, iniciando na linha atual ate encontrar uma EOF
            $ readlines() - retorna uma lista, cada elemento eh uma linha.

        $ Usando Laço For
            $ Exemplo:
                x = open("nome_arq.txt", "r", encoding="utf8")
                for linha in x:
                    print(linha)
            # ira printar linha por linha a cada loop (com um \n entre elas, usando .strip() pode-se tirar esse \n)
        $ Obs: Somente quando o arquivo é fechado que os dados são efetivamente salvos no arquivo

        $ Escrita de Arquivos
            - Abrindo: x = open("arquivo.txt", "w") # se n tiver esse arq criado, ela ira criar
            - se ja existir o seu conteudo sera apagado
            # para acrescentar sem apagar usaria-se "a"
        $ write(): grava uma string no arquivo por vez.

        $ writelines(): recebe um objeto iterável (seja uma lista, uma tupla, um dicionário, etc). Com este método, várias linhas poderão ser inseridas no arquivo de uma vez.

    ### Tratamento de erros (Try ... Except)
        @ Tratamento de Exceções - Erros Lógicos
            - tratar com ifs erros que podem ocorrer se os dados inseridos não estiverem sendo esperados.
        @ Tratar - ERRO: No such file or directory: usando o path.exists(file_name.txt): file = open(file_name.txt) - ou usando o FileNotFoundError (será visto posteriormente)
        @ Outros Erros: Usando: try:...except:(sera executado se ocorrer algum erro no try)
        @ Obs: O except pode ser usado para exeções de tipos distintos: ex: except ValueError: 
        @ Alguns erros:
            - NameError: não conseguiu encontrar um nome local ou global.
            - TypeError: Passado um ibjeto de um tipo diferente do tipo que a função espera.
            - ValueError: Valor de um argumento de uma função com um valor inadequado. 
            - ZeroDivisionError: gerado quando 0 é segundo argumento de divisão.
            - FileNotFoundError: arquivo o diretório não existe. (pode ser usado no caso tratado no inicio, por exemplo)
        @ try...except...else(o else sera executado se nenhum erro for encontrado)
    
    
    ### Módulos e PIP 
        % Modulos ->  Pacote de funções e variáveis que o dev pode usar e reutilizar dentro de seu sistema. 
            Podem ser autorais (feitos pelo proprio dev), direto da biblioteca de modulos do python ou de terceiros.
        % Como usar
            Importando-as: "import tools", por exemplo, esse trecho importa um modulo tools, que pode ser autoral (contando que tenha uma tools.py na grade de arquivos).

        % PIP - Gerenciador de pacotes do Python, para instalar, desinstalar ou alterar bibliotecas de terceiros.
            (geralmente vem instalado com python) 
            - Para ver versões: pip --version
        % Como usar: Exemplo para o Beautiful Soup -> pip install beautifulsoup4
            Para instalar dentro de página especifica (ideal que instale dentro de pasta) - pip install beautifulsoup4 -t ./libs
            Para desinstalar: pip uninstall beautifulsoup4
        % Para instalar várias de uma vez (ocorre em projetos)
            - Cria-se um requirements.txt e dentro dele se define bibliotecas que se quer instalar
            - Ex: (beautifulsoup4 == 4.9.3)
            - Depois rodar: pip install -r ./requirements.txt ou pip install -r ./requirements.txt -t ./libs

    ### Ambientes virtuais
        @ Configurando Ambiente Virtual:
            - pip install virtualenv
            - virtualenv nome_do_ambiente
            - source nome_do_ambiente/bin/activate  # Linux/Mac
            - nome_do_ambiente\Scripts\activate  # Windows

            - Agora que o ambiente virtual está ativo, você pode instalar as bibliotecas necessárias usando pip.
            - Mantenha um arquivo requirements.txt ou Pipfile atualizado com todas as dependências do projeto (Como visto anteriormente).

    